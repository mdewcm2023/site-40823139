var tipuesearch = {"pages": [{'title': 'About', 'text': 'my repo: mdewcm2023/site-40823139 \n my page: https://mdewcm2023.github.io/site-40823139/ \n \n', 'tags': '', 'url': 'About.html'}, {'title': '課程議題', 'text': '課程議題: \n \n https://mde.tw/wcm2023/content/Brython.html \xa0 是如何建立的? 有甚麼 用處 ? (兼學 \xa0 Github Gist ?) A:先必須在該網頁的source code內配置brython的基礎環境設定，而brython的角色就是轉譯器，在python的語法環境下將程式轉換成javascript，因此能夠達到網頁上的動態效果(比如跳出對話窗)，改網頁brython內容，可以學習到如何用url呼叫gist中的程式，如何在網頁上執行程式，如何設定按鈕及對應的功能等。 \n 你應該已經知道在 Windows 操作系統中, 瀏覽器 (Browser, ref: \xa0 what browser should you use , \xa0 what search engines should you use ) 是 \xa0 WWW \xa0 (World Wide Web 全球資訊網) 協定的客戶端 (Client), 那麼, 當使用者在瀏覽器的網址列 (URL address bar) 輸入網址, 就可以連結到該網址對應的網站, 那所謂的網站 (Web site) 是如何建立的? A:首先，一個Web site的產生需要前後端的工程，前端建構HTML、CSS和JavaScript等技術來構建網頁的外觀和功能，後端運用Python、PHP、Java等建立 網站的邏輯和數據處理，整合後置於伺服器中，當輸入網址後就會找到對應的內容呈現其網頁(伺服器很重要)。 \n https://nginx.org/ \xa0 是一套開源的程式 ( 原始碼 ), 通常用來作甚麼? 可在 Windows 與 Ubuntu 操作系統中安裝嗎? 該如何設定? A:Nginx可以建置www的伺服器，windows環境可以在 https://nginx.org/ 下載， Ubuntu可以利用apt套件下載，下載後必須調整，設定允許那些http的流量。 \n Git 是甚麼? ( 30 天精通 Git 版本控管 ) Github 是甚麼? Github 為什麼最近發出 通知 , 要所有的 員工全部採 Work from home 上班 ? 有沒有可能哪一天 Github 就像 Google 終止教育版 unlimited storage 的政策, 不再提供免費帳戶選項? \xa0 爛學校裡的 窮學生除了尋找 替代方案 外, 或許這時 \xa0 FossilSCM \xa0 就可派上用場. \n Git 明明非常補, 為什麼大多數人都吞不下去? 良藥苦口嗎? 假如有天你被要求 \xa0 WFH ? \n 你能想像曾經沒有手機與 沒有全球資訊網網站之前的生活型態 嗎? 或者是沒有線上遊戲與動漫的年代? \n 一代不如一代, 是真的嗎? 為什麼台灣不時興高中或大學輟學出去創業? 因為 \xa0 Google 繁體中文搜尋 只得不到 10 個結果? \n 有了 \xa0 ChatGPT , 一堆人將會沒有工作, 真是這樣嗎? 能不能打不過就加入? 聽過 役物而不役於物 嗎? \n 有一些 餐廳開始用機器煮菜 , 那是不是廚師很快就會被淘汰? 還有人記得曾有所謂 珠心算老師 嗎? \n 數位化, 虛擬化, 類比實體世界, 運算能力, 邏輯解析能力, 資料庫結構, 演算法, 海底電纜, 無線傳輸是靠"看不見"的"線"傳輸, 這個線是有還是無? 電力是數位還是類比? \n 曾經從台北到虎尾需要耗費好幾個小時, 現在搭高鐵只需要 1 小時 15 分, 假如 哆啦A夢 人能搭網路線則需要不到 1 秒, \xa0 我們是不是應該思考那些工作人需要實體移動, 而那些工作則可以直接在線上完成就好 ? \n 有人知道中華電信所提供的所謂光世代連線, 在某些時段, 用戶的網路連線協定只有 IPv4 嗎? 這會對使用者造成哪些影響? \n Python 3.11.2 是目前最新的版本 ( 下載可攜 Python3.11.2_for_NGSolve.7z ), 加上開源的 NGSolve 套件, 可以進行各種工程設計分析, 但因為 \xa0 Pyside2 \xa0 尚未支援 Python 3.10 以上的版本, 因此若要導入 \xa0 ngsgui , 就必須退回 Python 3.10.8 版 ( 下載可攜 Python3108_for_2023.7z , 支援 NGSolve with ngsgui, tcc and gnuplot, 其中 ngsugi 仍需要 debug). \n \n \n', 'tags': '', 'url': '課程議題.html'}, {'title': '課程整理', 'text': '', 'tags': '', 'url': '課程整理.html'}, {'title': 'CMD命令提示字元', 'text': '在計算機程式中將大量運用到CMD啟動近端資料夾的引擎，CMD即命令提示字元(command縮寫)，該工具就是所謂的Shell(殼層)。 \n 所謂的Shell是指 「為使用者提供使用者介面」的軟體，為User跟System溝通的橋樑(否則人類沒辦法直接跟電腦溝通)，而我們在Windows開啟檔案時大多是到檔案總管中點擊圖示開啟檔案，這樣的圖形化介面(GUI)能供使用者更直覺的使用(不用記命令)。 \n 不過使用CMD仍有不少好處，如有效率的達到目的、節省電腦資源、到其他環境(比如其他人的電腦)不用花太長時間了解新GUI...。因此高效與易用將成為使用者的抉擇點。而CMD還有以下特點: \n \n 指令不分大小寫 \n 我(使用者)下"命令"電腦做"提示" \n 老東西，很早就出現了，所以相容性不錯，寫法也簡單 \n \n CMD基本指令 \n \n cd current directory的縮寫，能移動指定目的(資料夾、檔案等) 常用:cd .. :回上層資料夾 \n dir Directory的縮寫，能列出該目錄下的資料 常用:dir a :所有底下的資料都顯示(含隱藏的) , dir q:只顯示有所有權的資料 \n \n 資料補充: \n 命令提示字元--CMD那麼好用你不學一下嗎? \n Command Line 超新手入門 \n', 'tags': '', 'url': 'CMD命令提示字元.html'}, {'title': '網頁與倉儲', 'text': '網頁的誕生 \n 一個基本的網頁架構由以下三者構成 \n \n HTML(架構)：網站的主體，用來定義段落、標題、嵌入圖片和影片等等 \n CSS(外觀)：設置版面、文字編排、顏色等 \n JavaScript(動作)：能完成網頁上的互動 \n \n 擁有以上三者就能組成最基本的靜態網頁，由此便能呈現出想呈現的的文字、圖片等，這種把用戶及設計師(UI/UX方)的需求呈現成網頁的技術就屬前端工程!但純粹編輯靜態網頁其實很麻煩(用F12看網頁的code就知道)，因為使用者還欠缺了後台(後端工程)，而有後台的網頁就稱"動態網頁"，也就是這門課用cms.bat的批次檔開啟後的網頁! \n 當利用動態網頁時，你會發現不再需要從純粹的code下手，只要打上想呈現的內容，更新後就會自動把轉換成對應的html檔，這對於經常需要維護的網頁方便許多!然而，加上後端之後，維護成本也勢必高出不少。 \n 網頁與倉儲 \n 課程之初，每個人都需要先創立一個github帳號，並建立個人倉儲，該倉儲將儲存課程網頁的檔案及資料。 \n github是一個協作開發平台，基本上就是一個版次控制工具。最大好處就是採用Git，每次push都能產生一個對應的版次，因此當出現大量麻煩的錯誤時或上級要求回歸前個設計時就能很方便的切換版次!而雲端資料庫不僅能避免掉近端的database損壞，也能達到協同開發的效用(但仍有倉儲commit被洗掉的可能，比如協同者處理分支不當，直接強推，把資料庫蓋掉。) \n Git優缺點 \n \n 能分散式的開發(有master跟branch) \n 能作為證明的歷史紀錄(每次改版的訊息都會留下) \n 效率不錯 \n 免費 免費 免費 \n 一切公開 \n \n \n 資料補充: \n 網站原理 (4)：什麼是靜態網頁？什麼是動態網頁？兩者有什麼差別？ \n 網站原理 (3)：網站是怎麼構成的？ – 淺談網站的3大要素：UI/UX設計師 前端工程師 後端工程師 \n', 'tags': '', 'url': '網頁與倉儲.html'}, {'title': 'SSH', 'text': 'SSH為 Secure Shell的縮寫，SSH的傳輸方式可以想像成寄送包裹似的，你寄出的包裹郵差並不會知道內容物(加密)，而且接收包裹的人必須確定是本人才能收! 透過SSH協定，過程中將會產生兩把鑰匙(一把公鑰及一把私鑰)，公鑰就好比是包裹，上面有寫收件人是誰，而且其他人也都能看到，但取貨仍然需要拿證件(私鑰)才能取。 \n 過去的github在不設定SSH的情況下推送需要輸入密碼才能push，不過在公開環境下輸入密碼想必是危險的事!在2021年8月github也宣布了不再支援這種輸入密碼的推送方式(微軟也做了類似的事)，取而代之的是personal access token(把密碼變成加密過的字串，填密碼時就填那串)。然而token也有外流的可能，利用SSH則可以直接推送，連toke都不用打，更為安全且效率(前提是private key有好好保存沒有亂放)。 \n', 'tags': '', 'url': 'SSH.html'}, {'title': 'Nginx建立伺服器', 'text': '本週任務:利用nginx建立非同步網頁伺服器，並呈現網頁 \n \n 架設所需環境:取得nginx，利用nignx作為web server \n 取得環境參數:在cmd輸入ipconfig取得ipv4的位址 \n 環境參數調整:開啟編輯器，匯入nginx\\conf資料夾中的config檔(nginx.conf)， 修改server name 由localhost改為本地的ipv4地址 \n 執行nginx，並在網頁上輸入其ip地址，正常情況下會顯示nginx\\html底層)的index.html內容 \n 將自己的網頁內容放入nginx\\html中，並重新啟動(啟動後應確認顯示內容) \n 進入防火牆的進階設定，選擇輸入規則，並指定為TCP型式，連接埠設定為80，並允許權限， 新增完成後會在新增規則的頁面中看到 \n 在同網域不同裝置下測試，若有成功顯示網頁則成功 \n \n \n 補充資料: \n [基礎觀念系列] Web Server & Nginx — (2) | by 莫力全 Kyle Mo | Starbugs Weekly 星巴哥技術專欄 | Medium \n', 'tags': '', 'url': 'Nginx建立伺服器.html'}, {'title': '平均成績讀取', 'text': 'task:已知五份成績，在個人的網頁中配置 Brython 程式環境, 並編寫一個能夠讀取上列五個成績檔案後, 列出各學員的平均分數者, 期中考成績若平均 < 60 則以 60 計算, 其餘若平均成績已經 >60 者各加 15 分至最多 95 分. \n 以下為五份成績 \n \n 1aw5.txt \n 1aw6.txt \n 1aw6-2.txt \n 1aw8.txt \n 1aw9.txt , \n \n \n get_score \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n', 'tags': '', 'url': '平均成績讀取.html'}, {'title': 'w15~w17', 'text': 'Task:利用Replit以全雲端方式建立github page \n w15(空的開始) \n \n 註冊Replit後建立Repl，選擇 Python template，名稱為w15 \n gin init初始化.git資料，git branch -m main切換至主分支 \n git submodule add https://github.com/mdecycu/cmsimde.git cmsimde 抓取子模組 \n 建立\xa0.gitignore，避免多餘檔案傳到倉儲 \n pip install flask flask_cors bs4 lxml pelican markdown gevent 下載所需模組 \n Run後進入靜態網站，自行更改密碼及內容 \n 在config中置入token給予上傳權限 \n git remote add origin 倉儲url設定推送的倉儲位置 \n git add->git commit(要在Replit的.git端，而不是直接在shell)->git push推送 \n \n w16~w17 \n \n 使用 mdecycu/cmsimde_site 建置新的倉儲(按下create a repository) \n 建立新的Repl，並選擇python template，此時選擇url匯入，並貼上該新倉儲的url \n pip install flask flask_cors bs4 lxml pelican markdown gevent 下載所需模組 \n Run後進入靜態網站，自行更改密碼及內容 \n 在config中置入token給予上傳權限 \n git add->git commit->git push推送 \n \n w15 vs w16~w17 w15因為建置的時候少了 .gitignore所以需要自己新增，且倉儲內沒有檔案，需要自己clone倉儲內容及cmsimde，後兩週則利用老師建立好的template，因此速度比較快。 \n 如果Replit是利用github建立，可以直接選擇倉儲，並且推送時不用toke即可推送，但相對的安全性也就比較低!', 'tags': '', 'url': 'w15~w17.html'}, {'title': 'AI', 'text': '就讓AI來介紹AI吧(以下由chatgpt產生) \n 人工智慧（Artificial Intelligence，簡稱AI）是指透過電腦系統模擬人類智能的科學和工程領域。AI的目標是使機器能夠像人類一樣思考、學習、理解和解決問題。 \n AI的發展和應用範圍非常廣泛，涵蓋了多個領域，包括機器學習、深度學習、語音識別、計算機視覺、自然語言處理、機器人技術等等。以下是一些常見的AI應用領域： \n \n \n 機器學習（Machine Learning）：這是AI的一個重要分支，通過給機器提供大量的數據和相關的算法，使機器能夠從數據中學習並自動改進性能，並可以應用於圖像識別、自然語言處理、推薦系統等領域。 \n \n \n 深度學習（Deep Learning）：這是機器學習的一個分支，模仿人類神經系統的結構和功能，通過多層次的神經網絡結構來學習和提取特徵。深度學習在圖像識別、語音識別和自然語言處理等領域取得了重大突破。 \n \n \n 語音識別（Speech Recognition）：AI可以透過語音識別技術將語音信號轉化為文本或命令，使機器能夠理解人類的語言並作出相應的回應。語音助手如蘋果的Siri、亞馬遜的Alexa和微軟的Cortana等就是基於語音識別技術開發的。 \n \n \n 計算機視覺（Computer Vision）：這是使機器能夠理解和解讀圖像和視頻的技術。通過使用影像處理、模式識別和機器學習等方法，計算機可以識別和分析圖像中的對象、場景和特徵，並應用於人臉識別、物體檢測、圖像分割等領域。 \n \n \n 自然語言 \n \n \n', 'tags': '', 'url': 'AI.html'}, {'title': '工業與AI', 'text': '在工業中已經運用了非常多的AI，比如說廣明旗下的達明機器人(目前在協作機器人是全球第二)，除了手臂原本就內建視覺鏡頭，現在又導入了AI資料庫，在影像辨識能力上提升了不少。那麼，明明已經有AI了，為什麼不在投入工廠的初期就全面應用AI? \n 模型需要訓練，而初期的模型出錯率很高，不可能在實體環境下直接邊學邊用(否則應該第一天就撞機了)，因此還是會以原先準確率高的"老辦法"主，AI為輔的方式進行控制!當有足夠的實際環境參數，並在虛擬環境中初步學習完成後才有可能在實體環境進行第二階段的學習，依此虛實整合還是很重要，而不是把AI直接放在實際環境它就會自己開始學。 \n \n', 'tags': '', 'url': '工業與AI.html'}, {'title': 'Chatgpt', 'text': '\n \n \n \n \n \n \n \n \n \n ChatGPT是OpenAI開發的一種語言模型，它是基於GPT-3.5架構訓練而成的。GPT代表「Generative Pre-trained Transformer」，是一種基於Transformer模型的語言生成模型。 \n ChatGPT旨在提供更自然、流暢且具有上下文理解能力的對話體驗。它被訓練過大量的文本資料，包括網頁內容、書籍、文章和對話紀錄等，以學習自然語言的模式和知識。這使得ChatGPT能夠回答問題、提供資訊、完成任務，並進行有趣的對話。 \n ChatGPT的訓練方式是無監督學習，這意味著它沒有明確的標籤或指導，而是通過預測下一個字詞或句子來學習文本之間的關聯性。這種訓練方式使得ChatGPT能夠在沒有特定任務設定的情況下生成有意義的回應。 \n 然而，值得注意的是，ChatGPT的回答是基於已知的資訊和模式推理出來的，而不是基於真實世界的實時資訊。它無法提供新的、最新的資訊，並且有時可能生成不正確或有限的回答。因此，在使用ChatGPT時，應該謹慎對待其提供的資訊，並在需要時核實並參考可靠的來源。 \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Chatgpt.html'}, {'title': 'New bing', 'text': '在微軟投資了OpenAI數十億的情況下，基於GPT-4框架的New bing就產生了，與chatgpt不同的是 \n \n chatgpt plus要錢，而bing chat免費 \n chatgpt的資料庫只截至9月 \n bing chat能夠搜尋及生成圖片 \n chatgpt在網路上有非常多外掛程式可用 \n \n', 'tags': '', 'url': 'New bing.html'}, {'title': 'Other', 'text': '', 'tags': '', 'url': 'Other.html'}, {'title': '資料可視化-Plotly繪圖', 'text': '最近同學在另一個課程遇到的有趣問題，在此寫了一個簡單的繪圖code供參考 目的:已從網站中取得數據的json檔之url，該如何在網頁上呈現圖表 為使範例圖形簡單些，簡化過的json內容如下 \n {\n  "data": [\n    {"x": -4, "y": 0},\n    {"x": -3, "y": 1},\n    {"x": -2, "y": 2},\n    {"x": 0, "y": 3},\n    {"x": 2, "y": 2},\n    {"x": 3, "y": 1},\n    {"x": 4, "y": 0}\n  ]\n} \n brython及plotly.js環境建立() \n <script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\']});\n}\n// ]]></script>\n<p id="brython_div"></p> \n \n \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n \n 補充資料: wcm2023 (mde.tw) \n', 'tags': '', 'url': '資料可視化-Plotly繪圖.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n', 'tags': '', 'url': 'Brython.html'}]};