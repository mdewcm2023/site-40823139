<h1>About</h1>
<p>my repo:<a href="https://github.com/mdewcm2023/site-40823139">mdewcm2023/site-40823139</a></p>
<p>my page:<a href="https://mdewcm2023.github.io/site-40823139/">https://mdewcm2023.github.io/site-40823139/</a></p>
<h1>課程議題</h1>
<p>課程議題:</p>
<ol>
<li><a href="https://mde.tw/wcm2023/content/Brython.html">https://mde.tw/wcm2023/content/Brython.html</a><span> </span>是如何建立的? 有甚麼<a href="https://mde.tw/wcm2023/content/Brython%20demo.html">用處</a>? (兼學<span> </span><a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">Github Gist</a>?)<br/><br/>A:先必須在該網頁的source code內配置brython的基礎環境設定，而brython的角色就是轉譯器，在python的語法環境下將程式轉換成javascript，因此能夠達到網頁上的動態效果(比如跳出對話窗)，改網頁brython內容，可以學習到如何用url呼叫gist中的程式，如何在網頁上執行程式，如何設定按鈕及對應的功能等。<br/><br/></li>
<li>你應該已經知道在 Windows 操作系統中, 瀏覽器 (Browser, ref:<span> </span><a href="https://www.google.com/search?q=what+browser+should+you+use">what browser should you use</a>,<span> </span><a href="https://www.google.com/search?q=what+search+engines+should+you+use">what search engines should you use</a>) 是<span> </span><a href="https://www.google.com/search?q=world+wide+web">WWW</a><span> </span>(World Wide Web 全球資訊網) 協定的客戶端 (Client), 那麼, 當使用者在瀏覽器的網址列 (URL address bar) 輸入網址, 就可以連結到該網址對應的網站, 那所謂的網站 (Web site) 是如何建立的?<br/><br/>A:首先，一個Web site的產生需要前後端的工程，前端建構HTML、CSS和JavaScript等技術來構建網頁的外觀和功能，後端運用Python、PHP、Java等建立<span>網站的邏輯和數據處理，整合後置於伺服器中，當輸入網址後就會找到對應的內容呈現其網頁(伺服器很重要)。<br/><br/></span></li>
<li><a href="https://nginx.org/">https://nginx.org/</a><span> </span>是一套開源的程式 (<a href="https://github.com/nginx/nginx">原始碼</a>), 通常用來作甚麼? 可在 Windows 與 Ubuntu 操作系統中安裝嗎? 該如何設定?<br/><br/>A:Nginx可以建置www的伺服器，windows環境可以在<a href="https://nginx.org/%EF%BC%89%E4%B8%8B%E8%BC%89Windows%E7%89%88%E6%9C%AC%E7%9A%84Nginx%EF%BC%8C%E7%84%B6%E5%BE%8C%E6%8C%89%E7%85%A7%E5%AE%89%E8%A3%9D%E6%8C%87%E5%8D%97%E9%80%B2%E8%A1%8C%E5%AE%89%E8%A3%9D%E3%80%82%E5%AE%89%E8%A3%9D%E9%81%8E%E7%A8%8B%E4%B8%AD%E6%82%A8%E9%9C%80%E8%A6%81%E8%A8%AD%E5%AE%9A%E9%85%8D%E7%BD%AE%E6%AA%94%E6%A1%88%EF%BC%88%E5%A6%82nginx.conf%EF%BC%89%E4%BB%A5%E6%BB%BF%E8%B6%B3%E6%82%A8%E7%9A%84%E9%9C%80%E6%B1%82%E3%80%82" target="_new">https://nginx.org/</a>下載，<span>Ubuntu可以利用apt套件下載，下載後必須調整，設定允許那些http的流量。</span><br/><br/></li>
<li>Git 是甚麼? (<a href="https://ithelp.ithome.com.tw/articles/10138791">30 天精通 Git 版本控管</a>) Github 是甚麼? Github 為什麼最近發出<a href="https://techcrunch.com/2023/02/09/github-lays-off-10-and-goes-fully-remote/">通知</a>, 要所有的<a href="https://technews.tw/2023/02/13/github-lays-off-10-of-its-workforce-and-all-work-remotely/">員工全部採 Work from home 上班</a>? 有沒有可能哪一天 Github 就像 Google 終止教育版 unlimited storage 的政策, 不再提供免費帳戶選項?<span> </span><span>爛學校裡的</span>窮學生除了尋找<a href="https://www.google.com/search?q=github+alternatives">替代方案</a>外, 或許這時<span> </span><a href="https://www.fossil-scm.org/">FossilSCM</a><span> </span>就可派上用場.</li>
<li>Git 明明非常補, 為什麼大多數人都吞不下去? 良藥苦口嗎? 假如有天你被要求<span> </span><a href="https://en.wikipedia.org/wiki/Remote_work">WFH</a>?</li>
<li>你能想像曾經沒有手機與<a href="https://brilliantio.com/what-was-life-like-before-the-internet/">沒有全球資訊網網站之前的生活型態</a>嗎? 或者是沒有線上遊戲與動漫的年代?</li>
<li>一代不如一代, 是真的嗎? 為什麼台灣不時興高中或大學輟學出去創業? 因為<span> </span><a href="https://www.google.com/search?client=firefox-b-d&amp;q=%E7%82%BA%E4%BB%80%E9%BA%BC%E5%8F%B0%E7%81%A3%E4%B8%8D%E6%99%82%E8%88%88%E9%AB%98%E4%B8%AD%E6%88%96%E5%A4%A7%E5%AD%B8%E8%BC%9F%E5%AD%B8%E5%87%BA%E5%8E%BB%E5%89%B5%E6%A5%AD%3F">Google 繁體中文搜尋</a>只得不到 10 個結果?</li>
<li>有了<span> </span><a href="https://www.zdnet.com/article/how-to-use-chatgpt/">ChatGPT</a>, 一堆人將會沒有工作, 真是這樣嗎? 能不能打不過就加入? 聽過<a href="https://xunzi-5000yan-com.translate.goog/xiushen/?_x_tr_sl=zh-CN&amp;_x_tr_tl=zh-TW">役物而不役於物</a>嗎?</li>
<li>有一些<a href="https://sdgs.udn.com/sdgs/story/12379/3269475?from=udn_ch1010_menu_main_cate">餐廳開始用機器煮菜</a>, 那是不是廚師很快就會被淘汰? 還有人記得曾有所謂<a href="https://udn.com/umedia/story/12910/6866095">珠心算老師</a>嗎?</li>
<li>數位化, 虛擬化, 類比實體世界, 運算能力, 邏輯解析能力, 資料庫結構, 演算法, 海底電纜, 無線傳輸是靠"看不見"的"線"傳輸, 這個線是有還是無? 電力是數位還是類比?</li>
<li>曾經從台北到虎尾需要耗費好幾個小時, 現在搭高鐵只需要 1 小時 15 分, 假如<span>哆啦A夢</span>人能搭網路線則需要不到 1 秒,<span> </span><a href="https://www.google.com/search?client=firefox-b-d&amp;q=%E6%88%91%E5%80%91%E6%98%AF%E4%B8%8D%E6%98%AF%E6%87%89%E8%A9%B2%E6%80%9D%E8%80%83%E9%82%A3%E4%BA%9B%E5%B7%A5%E4%BD%9C%E4%BA%BA%E9%9C%80%E8%A6%81%E5%AF%A6%E9%AB%94%E7%A7%BB%E5%8B%95%2C+%E8%80%8C%E9%82%A3%E4%BA%9B%E5%B7%A5%E4%BD%9C%E5%89%87%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8%E7%B7%9A%E4%B8%8A%E5%AE%8C%E6%88%90%E5%B0%B1%E5%A5%BD">我們是不是應該思考那些工作人需要實體移動, 而那些工作則可以直接在線上完成就好</a>?</li>
<li>有人知道中華電信所提供的所謂光世代連線, 在某些時段, 用戶的網路連線協定只有 IPv4 嗎? 這會對使用者造成哪些影響?</li>
<li>Python 3.11.2 是目前最新的版本 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EcsucQG0hGBPvGhckXUXhtwBW9gHS7PI-PE-moKe1vVbdg?e=8Xs9T0">下載可攜 Python3.11.2_for_NGSolve.7z</a>), 加上開源的 NGSolve 套件, 可以進行各種工程設計分析, 但因為<span> </span><a href="https://pypi.org/project/PySide2/">Pyside2</a><span> </span>尚未支援 Python 3.10 以上的版本, 因此若要導入<span> </span><a href="https://github.com/NGSolve/ngsgui">ngsgui</a>, 就必須退回 Python 3.10.8 版 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=qNMs7W">下載可攜 Python3108_for_2023.7z</a>, 支援 NGSolve with ngsgui, tcc and gnuplot, 其中 ngsugi 仍需要 debug).</li>
</ol>
<p><img alt="" class="add_border" height="220" src="https://mde.tw/wcm2023/images/Pyside2_right_now_no_for_Python3.11.png" width="600"/></p>
<h1>課程整理</h1>
<h2>CMD命令提示字元</h2>
<p>在計算機程式中將大量運用到CMD啟動近端資料夾的引擎，CMD即命令提示字元(command縮寫)，該工具就是所謂的Shell(殼層)。</p>
<p>所謂的Shell是指<span>「為使用者提供使用者介面」的軟體，為User跟System溝通的橋樑(否則人類沒辦法直接跟電腦溝通)，而我們在Windows開啟檔案時大多是到檔案總管中點擊圖示開啟檔案，這樣的圖形化介面(GUI)能供使用者更直覺的使用(不用記命令)。</span></p>
<p><span>不過使用CMD仍有不少好處，如有效率的達到目的、節省電腦資源、到其他環境(比如其他人的電腦)不用花太長時間了解新GUI...。因此高效與易用將成為使用者的抉擇點。而CMD還有以下特點:</span></p>
<ol>
<li><span>指令不分大小寫</span></li>
<li><span>我(使用者)下"命令"電腦做"提示"</span></li>
<li><span>老東西，很早就出現了，所以相容性不錯，寫法也簡單</span></li>
</ol>
<p><strong>CMD基本指令</strong></p>
<ol>
<li>cd<br/><span>current directory的縮寫，能移動指定目的(資料夾、檔案等)</span><br/><span>常用:cd .. :回上層資料夾</span></li>
<li>dir<br/><span>Directory的縮寫，能列出該目錄下的資料<br/></span>常用:dir a :所有底下的資料都顯示(含隱藏的) , dir q:只顯示有所有權的資料</li>
</ol>
<p>資料補充:</p>
<p><a href="https://ithelp.ithome.com.tw/articles/10276426">命令提示字元--CMD那麼好用你不學一下嗎?</a></p>
<p><a href="https://yuhantaiwan.coderbridge.io/2020/06/14/%E7%AD%86%E8%A8%98-CommandLine%E8%B6%85%E6%96%B0%E6%89%8B%E5%85%A5%E9%96%80/">Command Line 超新手入門</a></p>
<h2>網頁與倉儲</h2>
<p><strong>網頁的誕生</strong></p>
<p>一個基本的網頁架構由以下三者構成</p>
<ol>
<li>HTML(架構)：網站的主體，用來定義段落、標題、嵌入圖片和影片等等</li>
<li>CSS(外觀)：設置版面、文字編排、顏色等</li>
<li>JavaScript(動作)：能完成網頁上的互動</li>
</ol>
<p>擁有以上三者就能組成最基本的靜態網頁，由此便能呈現出想呈現的的文字、圖片等，這種把用戶及設計師(UI/UX方)的需求呈現成網頁的技術就屬前端工程!但純粹編輯靜態網頁其實很麻煩(用F12看網頁的code就知道)，因為使用者還欠缺了後台(後端工程)，而有後台的網頁就稱"動態網頁"，也就是這門課用cms.bat的批次檔開啟後的網頁!</p>
<p>當利用動態網頁時，你會發現不再需要從純粹的code下手，只要打上想呈現的內容，更新後就會自動把轉換成對應的html檔，這對於經常需要維護的網頁方便許多!然而，加上後端之後，維護成本也勢必高出不少。</p>
<p><strong>網頁與倉儲</strong></p>
<p><strong></strong>課程之初，每個人都需要先創立一個github帳號，並建立個人倉儲，該倉儲將儲存課程網頁的檔案及資料。</p>
<p>github是一個協作開發平台，基本上就是一個版次控制工具。最大好處就是採用Git，每次push都能產生一個對應的版次，因此當出現大量麻煩的錯誤時或上級要求回歸前個設計時就能很方便的切換版次!而雲端資料庫不僅能避免掉近端的database損壞，也能達到協同開發的效用(但仍有倉儲commit被洗掉的可能，比如協同者處理分支不當，直接強推，把資料庫蓋掉。)</p>
<p>Git優缺點</p>
<ol>
<li>能分散式的開發(有master跟branch)</li>
<li>能作為證明的歷史紀錄(每次改版的訊息都會留下)</li>
<li>效率不錯</li>
<li>免費 免費 免費</li>
<li>一切公開</li>
</ol>
<p></p>
<p>資料補充:</p>
<p><a href="https://jimmyswebnote.com/static-web-pages-vs-dynamic-web-pages/">網站原理 (4)：什麼是靜態網頁？什麼是動態網頁？兩者有什麼差別？</a></p>
<p><a href="https://mdecp2022.github.io/get_page/%E7%B6%B2%E9%A0%81%E8%88%87%E5%80%89%E5%84%B2/%E7%B6%B2%E7%AB%99%E5%8E%9F%E7%90%86%20(3)%EF%BC%9A%E7%B6%B2%E7%AB%99%E6%98%AF%E6%80%8E%E9%BA%BC%E6%A7%8B%E6%88%90%E7%9A%84%EF%BC%9F%20%E2%80%93%20%E6%B7%BA%E8%AB%87%E7%B6%B2%E7%AB%99%E7%9A%843%E5%A4%A7%E8%A6%81%E7%B4%A0%EF%BC%9AUI/UX%E8%A8%AD%E8%A8%88%E5%B8%AB%20%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%20%E5%BE%8C%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB">網站原理 (3)：網站是怎麼構成的？ – 淺談網站的3大要素：UI/UX設計師 前端工程師 後端工程師</a></p>
<h2>SSH</h2>
<p><span>SSH為 Secure Shell的縮寫，SSH的傳輸方式可以想像成寄送包裹似的，你寄出的包裹郵差並不會知道內容物(加密)，而且接收包裹的人必須確定是本人才能收!</span><span>透過SSH協定，過程中將會產生兩把鑰匙(一把公鑰及一把私鑰)，公鑰就好比是包裹，上面有寫收件人是誰，而且其他人也都能看到，但取貨仍然需要拿證件(私鑰)才能取。</span></p>
<p><span>過去的github在不設定SSH的情況下推送需要輸入密碼才能push，不過在公開環境下輸入密碼想必是危險的事!在2021年8月github也宣布了不再支援這種輸入密碼的推送方式(微軟也做了類似的事)，取而代之的是personal access token(把密碼變成加密過的字串，填密碼時就填那串)。然而token也有外流的可能，利用SSH則可以直接推送，連toke都不用打，更為安全且效率(前提是private key有好好保存沒有亂放)。</span></p>
<h2>Nginx建立伺服器</h2>
<p>本週任務:利用nginx建立非同步網頁伺服器，並呈現網頁</p>
<ol>
<li>架設所需環境:取得nginx，利用nignx作為web server</li>
<li>取得環境參數:在cmd輸入ipconfig取得ipv4的位址</li>
<li>環境參數調整:開啟編輯器，匯入nginx\conf資料夾中的config檔(nginx.conf)，<br/>修改server name 由localhost改為本地的ipv4地址</li>
<li>執行nginx，並在網頁上輸入其ip地址，正常情況下會顯示nginx\html底層)的index.html內容</li>
<li>將自己的網頁內容放入nginx\html中，並重新啟動(啟動後應確認顯示內容)</li>
<li>進入防火牆的進階設定，選擇輸入規則，並指定為TCP型式，連接埠設定為80，並允許權限，<br/>新增完成後會在新增規則的頁面中看到</li>
<li>在同網域不同裝置下測試，若有成功顯示網頁則成功<br/><br/><img alt="" height="262" src="/images/0.png" width="500"/></li>
</ol>
<p></p>
<p>補充資料:</p>
<p><a href="https://medium.com/starbugs/web-server-nginx-2-bc41c6268646">[基礎觀念系列] Web Server &amp; Nginx — (2) | by 莫力全 Kyle Mo | Starbugs Weekly 星巴哥技術專欄 | Medium</a></p><h2>w15~w17</h2>
<p>Task:利用Replit以全雲端方式建立github page</p>
<p>w15(空的開始)</p>
<ol>
<li>註冊Replit後建立Repl，選擇<span>Python template，名稱為w15</span></li>
<li><span>gin init初始化.git資料，git branch -m main切換至主分支</span></li>
<li>git submodule add https://github.com/mdecycu/cmsimde.git cmsimde 抓取子模組</li>
<li><span>建立 .gitignore，避免多餘檔案傳到倉儲</span></li>
<li>pip install flask flask_cors bs4 lxml pelican markdown gevent 下載所需模組</li>
<li>Run後進入靜態網站，自行更改密碼及內容</li>
<li>在config中置入token給予上傳權限</li>
<li><span>git remote add origin 倉儲url設定推送的倉儲位置</span></li>
<li>git add-&gt;git commit(要在Replit的.git端，而不是直接在shell)-&gt;git push推送</li>
</ol>
<p>w16~w17</p>
<ol>
<li>使用<a href="https://github.com/mdecycu/cmsimde_site">mdecycu/cmsimde_site</a>建置新的倉儲(按下create a repository)</li>
<li>建立新的Repl，並選擇python template，此時選擇url匯入，並貼上該新倉儲的url</li>
<li>pip install flask flask_cors bs4 lxml pelican markdown gevent 下載所需模組</li>
<li>Run後進入靜態網站，自行更改密碼及內容</li>
<li>在config中置入token給予上傳權限</li>
<li>git add-&gt;git commit-&gt;git push推送</li>
</ol>
<p>w15 vs w16~w17<br/>w15因為建置的時候少了<span>.gitignore所以需要自己新增，且倉儲內沒有檔案，需要自己clone倉儲內容及cmsimde，後兩週則利用老師建立好的template，因此速度比較快。</span></p>
<p>如果Replit是利用github建立，可以直接選擇倉儲，並且推送時不用toke即可推送，但相對的安全性也就比較低!</p><h1>AI</h1>
<p>就讓AI來介紹AI吧(以下由chatgpt產生)</p>
<p>人工智慧（Artificial Intelligence，簡稱AI）是指透過電腦系統模擬人類智能的科學和工程領域。AI的目標是使機器能夠像人類一樣思考、學習、理解和解決問題。</p>
<p>AI的發展和應用範圍非常廣泛，涵蓋了多個領域，包括機器學習、深度學習、語音識別、計算機視覺、自然語言處理、機器人技術等等。以下是一些常見的AI應用領域：</p>
<ol>
<li>
<p>機器學習（Machine Learning）：這是AI的一個重要分支，通過給機器提供大量的數據和相關的算法，使機器能夠從數據中學習並自動改進性能，並可以應用於圖像識別、自然語言處理、推薦系統等領域。</p>
</li>
<li>
<p>深度學習（Deep Learning）：這是機器學習的一個分支，模仿人類神經系統的結構和功能，通過多層次的神經網絡結構來學習和提取特徵。深度學習在圖像識別、語音識別和自然語言處理等領域取得了重大突破。</p>
</li>
<li>
<p>語音識別（Speech Recognition）：AI可以透過語音識別技術將語音信號轉化為文本或命令，使機器能夠理解人類的語言並作出相應的回應。語音助手如蘋果的Siri、亞馬遜的Alexa和微軟的Cortana等就是基於語音識別技術開發的。</p>
</li>
<li>
<p>計算機視覺（Computer Vision）：這是使機器能夠理解和解讀圖像和視頻的技術。通過使用影像處理、模式識別和機器學習等方法，計算機可以識別和分析圖像中的對象、場景和特徵，並應用於人臉識別、物體檢測、圖像分割等領域。</p>
</li>
<li>
<p>自然語言</p>
</li>
</ol>
<h2>工業與AI</h2>
<p>在工業中已經運用了非常多的AI，比如說廣明旗下的達明機器人(目前在協作機器人是全球第二)，除了手臂原本就內建視覺鏡頭，現在又導入了AI資料庫，在影像辨識能力上提升了不少。那麼，明明已經有AI了，為什麼不在投入工廠的初期就全面應用AI?</p>
<p>模型需要訓練，而初期的模型出錯率很高，不可能在實體環境下直接邊學邊用(否則應該第一天就撞機了)，因此還是會以原先準確率高的"老辦法"主，AI為輔的方式進行控制!當有足夠的實際環境參數，並在虛擬環境中初步學習完成後才有可能在實體環境進行第二階段的學習，依此虛實整合還是很重要，而不是把AI直接放在實際環境它就會自己開始學。</p>
<p></p>
<h2>Chatgpt</h2>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-edyhu-79elbk h-full dark:bg-gray-800">
<div class="react-scroll-to-bottom--css-edyhu-1n7m0yu">
<div class="flex flex-col text-sm dark:bg-gray-800">
<div class="group w-full text-gray-800 dark:text-gray-100 border-b border-black/10 dark:border-gray-900/50 bg-gray-50 dark:bg-[#444654]">
<div class="flex p-4 gap-4 text-base md:gap-6 md:max-w-2xl lg:max-w-[38rem] xl:max-w-3xl md:py-6 lg:px-0 m-auto">
<div class="relative flex w-[calc(100%-50px)] flex-col gap-1 md:gap-3 lg:w-[calc(100%-115px)]">
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap break-words">
<div class="markdown prose w-full break-words dark:prose-invert light">
<p>ChatGPT是OpenAI開發的一種語言模型，它是基於GPT-3.5架構訓練而成的。GPT代表「Generative Pre-trained Transformer」，是一種基於Transformer模型的語言生成模型。</p>
<p>ChatGPT旨在提供更自然、流暢且具有上下文理解能力的對話體驗。它被訓練過大量的文本資料，包括網頁內容、書籍、文章和對話紀錄等，以學習自然語言的模式和知識。這使得ChatGPT能夠回答問題、提供資訊、完成任務，並進行有趣的對話。</p>
<p>ChatGPT的訓練方式是無監督學習，這意味著它沒有明確的標籤或指導，而是通過預測下一個字詞或句子來學習文本之間的關聯性。這種訓練方式使得ChatGPT能夠在沒有特定任務設定的情況下生成有意義的回應。</p>
<p>然而，值得注意的是，ChatGPT的回答是基於已知的資訊和模式推理出來的，而不是基於真實世界的實時資訊。它無法提供新的、最新的資訊，並且有時可能生成不正確或有限的回答。因此，在使用ChatGPT時，應該謹慎對待其提供的資訊，並在需要時核實並參考可靠的來源。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h2>New bing</h2>
<p>在微軟投資了OpenAI數十億的情況下，基於GPT-4框架的New bing就產生了，與chatgpt不同的是</p>
<ol>
<li>chatgpt plus要錢，而bing chat免費</li>
<li>chatgpt的資料庫只截至9月</li>
<li>bing chat能夠搜尋及生成圖片</li>
<li>chatgpt在網路上有非常多外掛程式可用</li>
</ol>
<h1>Other</h1>
<h2>資料可視化-Plotly繪圖</h2>
<p>最近同學在另一個課程遇到的有趣問題，在此寫了一個簡單的繪圖code供參考<br/>目的:已從網站中取得數據的json檔之url，該如何在網頁上呈現圖表<br/><br/>為使範例圖形簡單些，簡化過的json內容如下</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">{
  "data": [
    {"x": -4, "y": 0},
    {"x": -3, "y": 1},
    {"x": -2, "y": 2},
    {"x": 0, "y": 3},
    {"x": 2, "y": 2},
    {"x": 3, "y": 1},
    {"x": 4, "y": 0}
  ]
}</pre>
<p>brython及plotly.js環境建立()</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/']});
}
</script>
<p id="brython_div"></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/40823139/7ab8efaa708a064ed3942c28aefcfc33/raw/2fc986b4f7f4c480a16db72cfc7946a7bceb4d5a/get_chart2.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p></p>
<p>補充資料:<a href="https://mde.tw/wcm2023/content/Brython_ex2.html">wcm2023 (mde.tw)</a></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<hr/>