<h1>About</h1>
<p>my repo:<a href="https://github.com/mdewcm2023/site-40823139">mdewcm2023/site-40823139</a></p>
<p>my page:<a href="https://mdewcm2023.github.io/site-40823139/">https://mdewcm2023.github.io/site-40823139/</a></p>
<h1>課程議題</h1>
<p>課程議題:</p>
<ol>
<li><a href="https://mde.tw/wcm2023/content/Brython.html">https://mde.tw/wcm2023/content/Brython.html</a><span> </span>是如何建立的? 有甚麼<a href="https://mde.tw/wcm2023/content/Brython%20demo.html">用處</a>? (兼學<span> </span><a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">Github Gist</a>?)</li>
<li>你應該已經知道在 Windows 操作系統中, 瀏覽器 (Browser, ref:<span> </span><a href="https://www.google.com/search?q=what+browser+should+you+use">what browser should you use</a>,<span> </span><a href="https://www.google.com/search?q=what+search+engines+should+you+use">what search engines should you use</a>) 是<span> </span><a href="https://www.google.com/search?q=world+wide+web">WWW</a><span> </span>(World Wide Web 全球資訊網) 協定的客戶端 (Client), 那麼, 當使用者在瀏覽器的網址列 (URL address bar) 輸入網址, 就可以連結到該網址對應的網站, 那所謂的網站 (Web site) 是如何建立的?</li>
<li><a href="https://nginx.org/">https://nginx.org/</a><span> </span>是一套開源的程式 (<a href="https://github.com/nginx/nginx">原始碼</a>), 通常用來作甚麼? 可在 Windows 與 Ubuntu 操作系統中安裝嗎? 該如何設定?</li>
<li>Git 是甚麼? (<a href="https://ithelp.ithome.com.tw/articles/10138791">30 天精通 Git 版本控管</a>) Github 是甚麼? Github 為什麼最近發出<a href="https://techcrunch.com/2023/02/09/github-lays-off-10-and-goes-fully-remote/">通知</a>, 要所有的<a href="https://technews.tw/2023/02/13/github-lays-off-10-of-its-workforce-and-all-work-remotely/">員工全部採 Work from home 上班</a>? 有沒有可能哪一天 Github 就像 Google 終止教育版 unlimited storage 的政策, 不再提供免費帳戶選項?<span> </span><span>爛學校裡的</span>窮學生除了尋找<a href="https://www.google.com/search?q=github+alternatives">替代方案</a>外, 或許這時<span> </span><a href="https://www.fossil-scm.org/">FossilSCM</a><span> </span>就可派上用場.</li>
<li>Git 明明非常補, 為什麼大多數人都吞不下去? 良藥苦口嗎? 假如有天你被要求<span> </span><a href="https://en.wikipedia.org/wiki/Remote_work">WFH</a>?</li>
<li>你能想像曾經沒有手機與<a href="https://brilliantio.com/what-was-life-like-before-the-internet/">沒有全球資訊網網站之前的生活型態</a>嗎? 或者是沒有線上遊戲與動漫的年代?</li>
<li>一代不如一代, 是真的嗎? 為什麼台灣不時興高中或大學輟學出去創業? 因為<span> </span><a href="https://www.google.com/search?client=firefox-b-d&amp;q=%E7%82%BA%E4%BB%80%E9%BA%BC%E5%8F%B0%E7%81%A3%E4%B8%8D%E6%99%82%E8%88%88%E9%AB%98%E4%B8%AD%E6%88%96%E5%A4%A7%E5%AD%B8%E8%BC%9F%E5%AD%B8%E5%87%BA%E5%8E%BB%E5%89%B5%E6%A5%AD%3F">Google 繁體中文搜尋</a>只得不到 10 個結果?</li>
<li>有了<span> </span><a href="https://www.zdnet.com/article/how-to-use-chatgpt/">ChatGPT</a>, 一堆人將會沒有工作, 真是這樣嗎? 能不能打不過就加入? 聽過<a href="https://xunzi-5000yan-com.translate.goog/xiushen/?_x_tr_sl=zh-CN&amp;_x_tr_tl=zh-TW">役物而不役於物</a>嗎?</li>
<li>有一些<a href="https://sdgs.udn.com/sdgs/story/12379/3269475?from=udn_ch1010_menu_main_cate">餐廳開始用機器煮菜</a>, 那是不是廚師很快就會被淘汰? 還有人記得曾有所謂<a href="https://udn.com/umedia/story/12910/6866095">珠心算老師</a>嗎?</li>
<li>數位化, 虛擬化, 類比實體世界, 運算能力, 邏輯解析能力, 資料庫結構, 演算法, 海底電纜, 無線傳輸是靠"看不見"的"線"傳輸, 這個線是有還是無? 電力是數位還是類比?</li>
<li>曾經從台北到虎尾需要耗費好幾個小時, 現在搭高鐵只需要 1 小時 15 分, 假如<span>哆啦A夢</span>人能搭網路線則需要不到 1 秒,<span> </span><a href="https://www.google.com/search?client=firefox-b-d&amp;q=%E6%88%91%E5%80%91%E6%98%AF%E4%B8%8D%E6%98%AF%E6%87%89%E8%A9%B2%E6%80%9D%E8%80%83%E9%82%A3%E4%BA%9B%E5%B7%A5%E4%BD%9C%E4%BA%BA%E9%9C%80%E8%A6%81%E5%AF%A6%E9%AB%94%E7%A7%BB%E5%8B%95%2C+%E8%80%8C%E9%82%A3%E4%BA%9B%E5%B7%A5%E4%BD%9C%E5%89%87%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%9C%A8%E7%B7%9A%E4%B8%8A%E5%AE%8C%E6%88%90%E5%B0%B1%E5%A5%BD">我們是不是應該思考那些工作人需要實體移動, 而那些工作則可以直接在線上完成就好</a>?</li>
<li>有人知道中華電信所提供的所謂光世代連線, 在某些時段, 用戶的網路連線協定只有 IPv4 嗎? 這會對使用者造成哪些影響?</li>
<li>Python 3.11.2 是目前最新的版本 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EcsucQG0hGBPvGhckXUXhtwBW9gHS7PI-PE-moKe1vVbdg?e=8Xs9T0">下載可攜 Python3.11.2_for_NGSolve.7z</a>), 加上開源的 NGSolve 套件, 可以進行各種工程設計分析, 但因為<span> </span><a href="https://pypi.org/project/PySide2/">Pyside2</a><span> </span>尚未支援 Python 3.10 以上的版本, 因此若要導入<span> </span><a href="https://github.com/NGSolve/ngsgui">ngsgui</a>, 就必須退回 Python 3.10.8 版 (<a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EWWklzSXEqZAoAsF7YCiUdQBq3Frt-VQl9p0ah8ZE2AoBQ?e=qNMs7W">下載可攜 Python3108_for_2023.7z</a>, 支援 NGSolve with ngsgui, tcc and gnuplot, 其中 ngsugi 仍需要 debug).</li>
</ol>
<p><img alt="" class="add_border" height="220" src="https://mde.tw/wcm2023/images/Pyside2_right_now_no_for_Python3.11.png" width="600"/></p><h1>課程整理</h1>
<h2>w9</h2>
<p>Brython 讀取 url中的data</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">url = "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt"
data = open(url).read().split("\n")
data = data[1:]
for i in data:
    #print(i)
    stud = i.split(":")[0]
    score =  i.split(":")[1]
    print(stud, score)</pre>
<p>Brython讀取url，並顯示五次考試成績平均(沒分數者，視為0分)，此為chatgpt參考答案1</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">urls = ["https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt",        "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt",        "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt",        "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt",        "https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt"]

students = {}
for url in urls:
    data = open(url).read().split("\n")[1:]
    for i in data:
        stud, score = i.split(":")
        if not score.isnumeric():
            score = 0
        score = int(score)
        students.setdefault(stud, []).append(score)

for stud, scores in students.items():
    avg_score = sum(scores) / len(scores)
    print(stud, avg_score)
</pre>
<h2>w10</h2>
<p>本週任務:利用nginx建立非同步網頁伺服器，並呈現網頁</p>
<ol>
<li>架設所需環境:取得nginx，利用nignx作為web server</li>
<li>取得環境參數:在cmd輸入ipconfig取得ipv4的位址</li>
<li>環境參數調整:開啟編輯器，匯入nginx\conf資料夾中的config檔(nginx.conf)，<br/>修改server name 由localhost改為本地的ipv4地址</li>
<li>執行nginx，並在網頁上輸入其ip地址，正常情況下會顯示nginx\html底層)的index.html內容</li>
<li>將自己的網頁內容放入nginx\html中，並重新啟動(啟動後應確認顯示內容)</li>
<li>進入防火牆的進階設定，選擇輸入規則，並指定為TCP型式，連接埠設定為80，並允許權限，<br/>新增完成後會在新增規則的頁面中看到</li>
<li>在同網域不同裝置下測試，若有成功顯示網頁則成功<img alt="" height="262" src="blob:https://127.0.0.1:9443/028e7ecb-c0a2-4b97-b3ae-b626472c1481" width="500"/></li>
</ol>
<p></p>
<p>補充資料:</p>
<p><a href="https://medium.com/starbugs/web-server-nginx-2-bc41c6268646">[基礎觀念系列] Web Server &amp; Nginx — (2) | by 莫力全 Kyle Mo | Starbugs Weekly 星巴哥技術專欄 | Medium</a></p>
<h2>w15</h2>
<h2>w16</h2>
<h2>w17</h2><h1>AI</h1>
<p>補充 gpt4 bing</p>
<h2>Chatgpt</h2>
<h2>BingAI</h2><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<hr/>